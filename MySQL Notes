SQL分类：
DDL：Data Definition Language，数据定义语言，数据库对象定义，常用关键字包括create, drop, alter等
DML：Data Manipulation Language， 数据操纵语言，用于增删改查，检查数据完整性，常用关键字包括insert, delete, update, 和 select等
DCL：Data Control Language，数据控制语言，定义访问权限和安全级别，主要关键字包括grant, revoke等

DDL语句
连接数据库：mysql -uroot -p
创建数据库：create database [dbname]
查看数据库：show databases
选择要操作的数据库：use [dbname]
查看数据表：show tables
删除数据库：drop database [dbname]
创建表：create table [tablename](column_name column_type_constraints,...)
   >这里可以一次添加多个数据列
查看数据表信息：desc [tablename]，更完整的查看表信息可以使用: show create table [tablename]
删除表：drop table [tablename]
修改表：
      >修改表类型：alter table [tablename] modify [column_name] [column_type_coustraints] first/after [column_name]
      >增加表字段：alter table [tablename] add column [column_name] [column_type_constraints] first/after [column_name]
      >删除表字段：alter table [tablename] drop column [column_name]
      >修改字段名：alter table [tablename] change [old_column_name] [new_column_name] [column_type_constraints] first/after [column_name]
      change和modify都可以修改表的类型，但是change方法需要写两次表的名称
      >修改字段顺序：在ADD, MODIFY, CHANGE语法的最后面可以添加first/after [column_name]来确定列的顺序
      chenge，first，after都是SQL的命令的延伸，因此并不一定在所有地方都适用
      >修改表名称：alter table [tablename] rename [new_tablename]
      
DML语句
插入记录：insert into [tablename] (column_names) values (values)
*插入记录可以不指定字段名称，但是value的顺序必须和字段的排列顺序保持一致
*对于可空字段，非空但有默认值，以及自增字段可以不在其中出现
*insert语句可以一次插入多条记录：insert into [tablename] (column_names) values (values), (values), (values);
更新记录：update [tablename] set [column_name]=[value] where [condition]
*update语句支持一次修改多个数据表中的数据：update [tablename] [tablename_code], [tablename] [tablename_code] set [tablename].[column_name]=[value], [tablename].[column_name]=[value] where [condition]
*多表更新的语法更多的用在了根据一个表的字段，来动态更新另外一个表的字段
删除记录：delete from [tablename] where [condition]
*delete可以一次删除多个表的数据：delete [tablename_code], [tablename_code] from [tablename] [tablename_code], [tablename] [tablename_code] where [condition]
*delete语句若是没有添加where条件，则会删除整一个表
查询记录
      >全部查询：select * from [tablename] where [condition]
      >部分查询：select [column_name], [column_name] from [tablename] where [condition]
      >去重查询：添加关键字"distinct"，select distinct [column_names] from [tablename] where [condition]
      *where 中的条件可以是 =, !=, >=, <=, <, >, 多个条件可以使用or, and等逻辑运算符联合查询
      >排序和限制：select [column_names] from [tablename] where [condition] order by [column_name] desc/asc, [column_name] desc / asc
      *默认为升序asc
      >查询结果部分显示：使用limit关键字：select ... limit [offset_start], [row_count]
      *offset_start是偏移量，默认为0
      *limit经常和order by一起配合使用来进行记录的分页显示
      *limit是MySQL在SQL上的延申，因此在别的数据库上不能通用
      >聚合汇总：select [fields] [function] from [tablename] where [condition] group by [fields] with rollup having [condition]
      *function中我们有sum, count, max, min函数
      *group by是我们要聚合的字段
      *with rollup是可选的，表示我们是否要对分类聚合后的结果进行再汇总
      *having是对分类后的结果再过滤
      *having和where的区别在于having是聚合后的再过滤，通常我们都会选择先用where过滤
      >表连接：分为外连接和内连接，平时我们使用内连接比较多，内连接能够查找出两个表的共同匹配项，而外连接还会显示不匹配的项
      >子查询：查询所需要的条件是另一个查询，关键字包含in, not in, =, !=, exists, not exists
      >例子：select ... in(select ...)
      *表连接在很多情况下优化子查询
      >记录联合：select ... union / union all select ...
      *将两个搜索结果合并一起显示，其中union all是直接将结果合并，而union是对union all的结果进行一次distinct的去重操作
      
数据类型
*MySQL数据类型分类：数值型、字符串类型、日期和时间类型

数值类型
*严格数值类型：integer, tinyint, smallint, mediumint, bigint, decimal, numeric, bit
*近似数值类型：float, real, double precision
*整数类型参数：
   >zerofill, 在数值前用0填充剩余字符
   >auto_increment, 一个表最多只能有一个列， 并且该列应该定义为not null, 并且定义为primary key 或者 unique
*浮点数：float 和 double, 可以添加精度和标度，若是没有添加，则按照实际精度显示
*定点数：double, 没有添加精度则按照默认的（10，0）进行操作，溢出即报错
*bit类型的需要使用bit()或者hex()函数进行读取
   
日期时间类型
>Date：用来表示年月日
>Datetime：用来表示年月日 时分秒
>Time：用来表示时分秒
>Timestamp：需要经常插入或更新日期为当前系统时间（根据时区不同会有所不同），创建对象时系统自动创建默认值current_timestamp，但是只有表中的第一个有这个属性，其余默认值设置为0，
>Year：用来表示年份
*now函数可以插入当前日期：insert into t values(now(), now(), now())
*Timestamp 和 Datetime的区别：
   Timestamp支持的时间范围比较小
   表中第一个Timestamp列默认设置为当前日期和时间
   Timestamp插入和查询显示的日期和时间都会受时区的影响，Datetime只反应插入时当地的时区
   
字符串类型
char和varchar类型：
*都用来保存较短的字符串
*char固定为创建表时声明的长度，varchar为可变长字符串
*检索时，char默认删除尾部的空格，varchar会保留空格

binary和varbinary与char和varchar类似，不同的是他们包含的是二进制字符串而不是非二进制

enum枚举类型
*忽略大小写
*插入非指定范围内的值则会显示第一个值
*一次只能取一个值
   
set类型
*与enum类型类似
*单次可以取一个或者多个值
*不在范围内的值不允许被插入到列中
*包含重复的集合只取一次，去重写入

运算符
算术运算符
+, -, *, /, div, %, mod
除法除数为0，显示为NULL

比较运算符
=, <>, !=, <=>, <, <=, >, >=, between, in, is null, is not null, like, regexp/ rlike
NULL不能用 = 来比较
<=>是安全等于，即使是NULL也可以进行比较
between的用法，a between min and max
in的用法，select a in (values)
like的用法，a like %string%，相似匹配，当a中含有string的字符串时返回1
regexp的用法，str regexp str_pattern，正则匹配，str中含有str_pattern相匹配的字符串时返回1

逻辑运算符
not/! 逻辑非
*not null返回null

and/&& 逻辑与
*操作数中有一个为NULL则显示为NULL

or/|| 逻辑或
当有一个操作数为NULL，另一个为1，则显示为1，否则结果为0
当操作数均为NULL，则显示为NULL

xor 逻辑异或
有一个NULL则返回NULL
两个操作数真假相反则结果为1

位运算
将操作数转换为二进制之后，对每一位进行制定的逻辑运算，最后得出结果
&, |, ^ 位异或, ~ 位取反, >> 位右移, << 位左移


