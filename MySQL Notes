SQL分类：
DDL：Data Definition Language，数据定义语言，数据库对象定义，常用关键字包括create, drop, alter等
DML：Data Manipulation Language， 数据操纵语言，用于增删改查，检查数据完整性，常用关键字包括insert, delete, update, 和 select等
DCL：Data Control Language，数据控制语言，定义访问权限和安全级别，主要关键字包括grant, revoke等

DDL语句
连接数据库：mysql -uroot -p
创建数据库：create database [dbname]
查看数据库：show databases
选择要操作的数据库：use [dbname]
查看数据表：show tables
删除数据库：drop database [dbname]
创建表：create table [tablename](column_name column_type_constraints,...)
   >这里可以一次添加多个数据列
查看数据表信息：desc [tablename]，更完整的查看表信息可以使用: show create table [tablename]
删除表：drop table [tablename]
修改表：
      >修改表类型：alter table [tablename] modify [column_name] [column_type_coustraints] first/after [column_name]
      >增加表字段：alter table [tablename] add column [column_name] [column_type_constraints] first/after [column_name]
      >删除表字段：alter table [tablename] drop column [column_name]
      >修改字段名：alter table [tablename] change [old_column_name] [new_column_name] [column_type_constraints] first/after [column_name]
      change和modify都可以修改表的类型，但是change方法需要写两次表的名称
      >修改字段顺序：在ADD, MODIFY, CHANGE语法的最后面可以添加first/after [column_name]来确定列的顺序
      chenge，first，after都是SQL的命令的延伸，因此并不一定在所有地方都适用
      >修改表名称：alter table [tablename] rename [new_tablename]
      
DML语句
插入记录：insert into [tablename] (column_names) values (values)
*插入记录可以不指定字段名称，但是value的顺序必须和字段的排列顺序保持一致
*对于可空字段，非空但有默认值，以及自增字段可以不在其中出现
*insert语句可以一次插入多条记录：insert into [tablename] (column_names) values (values), (values), (values);
更新记录：update [tablename] set [column_name]=[value] where [condition]
*update语句支持一次修改多个数据表中的数据：update [tablename] [tablename_code], [tablename] [tablename_code] set [tablename].[column_name]=[value], [tablename].[column_name]=[value] where [condition]
*多表更新的语法更多的用在了根据一个表的字段，来动态更新另外一个表的字段
删除记录：delete from [tablename] where [condition]
*delete可以一次删除多个表的数据：delete [tablename_code], [tablename_code] from [tablename] [tablename_code], [tablename] [tablename_code] where [condition]
*delete语句若是没有添加where条件，则会删除整一个表
查询记录
      >全部查询：select * from [tablename] where [condition]
      >部分查询：select [column_name], [column_name] from [tablename] where [condition]
      >去重查询：添加关键字"distinct"，select distinct [column_names] from [tablename] where [condition]
      *where 中的条件可以是 =, !=, >=, <=, <, >, 多个条件可以使用or, and等逻辑运算符联合查询
      >排序和限制：select [column_names] from [tablename] where [condition] order by [column_name] desc/asc, [column_name] desc / asc
      *默认为升序asc
      >查询结果部分显示：使用limit关键字：select ... limit [offset_start], [row_count]
      *offset_start是偏移量，默认为0
      *limit经常和order by一起配合使用来进行记录的分页显示
      *limit是MySQL在SQL上的延申，因此在别的数据库上不能通用
      >聚合汇总：select [fields] [function] from [tablename] where [condition] group by [fields] with rollup having [condition]
      *function中我们有sum, count, max, min函数
      *group by是我们要聚合的字段
      *with rollup是可选的，表示我们是否要对分类聚合后的结果进行再汇总
      *having是对分类后的结果再过滤
      *having和where的区别在于having是聚合后的再过滤，通常我们都会选择先用where过滤
      >表连接：分为外连接和内连接，平时我们使用内连接比较多，内连接能够查找出两个表的共同匹配项，而外连接还会显示不匹配的项
      >子查询：查询所需要的条件是另一个查询，关键字包含in, not in, =, !=, exists, not exists
      >例子：select ... in(select ...)
      *表连接在很多情况下优化子查询
      >记录联合：select ... union / union all select ...
      *将两个搜索结果合并一起显示，其中union all是直接将结果合并，而union是对union all的结果进行一次distinct的去重操作
      
数据类型
*MySQL数据类型分类：数值型、字符串类型、日期和时间类型

数值类型
*严格数值类型：integer, tinyint, smallint, mediumint, bigint, decimal, numeric, bit
*近似数值类型：float, real, double precision
*整数类型参数：
   >zerofill, 在数值前用0填充剩余字符
   >auto_increment, 一个表最多只能有一个列， 并且该列应该定义为not null, 并且定义为primary key 或者 unique
*浮点数：float 和 double, 可以添加精度和标度，若是没有添加，则按照实际精度显示
*定点数：double, 没有添加精度则按照默认的（10，0）进行操作，溢出即报错
*bit类型的需要使用bit()或者hex()函数进行读取
   
日期时间类型
>Date：用来表示年月日
>Datetime：用来表示年月日 时分秒
>Time：用来表示时分秒
>Timestamp：需要经常插入或更新日期为当前系统时间（根据时区不同会有所不同），创建对象时系统自动创建默认值current_timestamp，但是只有表中的第一个有这个属性，其余默认值设置为0，
>Year：用来表示年份
*now函数可以插入当前日期：insert into t values(now(), now(), now())
*Timestamp 和 Datetime的区别：
   Timestamp支持的时间范围比较小
   表中第一个Timestamp列默认设置为当前日期和时间
   Timestamp插入和查询显示的日期和时间都会受时区的影响，Datetime只反应插入时当地的时区
   
字符串类型
char和varchar类型：
*都用来保存较短的字符串
*char固定为创建表时声明的长度，varchar为可变长字符串
*检索时，char默认删除尾部的空格，varchar会保留空格

binary和varbinary与char和varchar类似，不同的是他们包含的是二进制字符串而不是非二进制

enum枚举类型
*忽略大小写
*插入非指定范围内的值则会显示第一个值
*一次只能取一个值
   
set类型
*与enum类型类似
*单次可以取一个或者多个值
*不在范围内的值不允许被插入到列中
*包含重复的集合只取一次，去重写入

运算符
算术运算符
+, -, *, /, div, %, mod
除法除数为0，显示为NULL

比较运算符
=, <>, !=, <=>, <, <=, >, >=, between, in, is null, is not null, like, regexp/ rlike
NULL不能用 = 来比较
<=>是安全等于，即使是NULL也可以进行比较
between的用法，a between min and max
in的用法，select a in (values)
like的用法，a like %string%，相似匹配，当a中含有string的字符串时返回1
regexp的用法，str regexp str_pattern，正则匹配，str中含有str_pattern相匹配的字符串时返回1

逻辑运算符
not/! 逻辑非
*not null返回null

and/&& 逻辑与
*操作数中有一个为NULL则显示为NULL

or/|| 逻辑或
当有一个操作数为NULL，另一个为1，则显示为1，否则结果为0
当操作数均为NULL，则显示为NULL

xor 逻辑异或
有一个NULL则返回NULL
两个操作数真假相反则结果为1

位运算
将操作数转换为二进制之后，对每一位进行制定的逻辑运算，最后得出结果
&, |, ^ 位异或, ~ 位取反, >> 位右移, << 位左移

常用函数
字符串函数
CONCAT(S1, S2, ...) 字符串连接，若有一个NULL，连接时结果都将时NULL
INSERT(str, x, y, instr) 将字符串str从x开始，y个字符长的子串替换为instr
LOWER()和UPPER()
LEFT(str，x)和RIGHT(str，x) 返回字符串str左边或右边的x个字符，若x为NULL，则不返回任何值
LPAD(str，n，pad)和RPAD(str，n，pad) 用pad对字符串str最左边或者最右边进行填充，直到字符串长度为n为止
LTRIM(str)和RTRIM(str) 去掉左边或者右边的空格
REPEAT(str，x) 将字符串str重复x次返回结果
REPLACE(str，a，b) 用字符串b替换str中所有出现的字符串a
STRCAM(s1，s2) 比较字符串ASCII码大小，小于则为-1，相等为0，大于为1
TRIM(str) 去掉左右两侧的空格
SUBSTRING(str，x，y) 返回str从x开始的y个字符长度的子串

数值函数
ABS() 返回绝对值
CEIL(x) 返回大于x的最小整数
FLOOR(x) 返回小于x的最大整数
MOD(x，y) 模函数
RAND() 返回0到1的随机值
ROUND(x，y) 返回x四舍五入有y位小数的值，整数则保留y位的0，默认y等于0
TRUNCAT(x，y) 截断数字x保留y位小数的值，与ROUND不同的是不进行四舍五入

日期函数
CURDATE() 返回当前日期
CURTIME() 返回当前时间
NOW() 返回当前时间及日期
UNIX_TIMESTAMP(date) 返回date的UNIX时间戳
FROM_UNIXTIME(unixtime) 返回unixtime时间戳对应的日期
WEEK(date) 返回当前是一年的第几周
YEAR(date) 返回date所给的是那一年
HOUR(time) 和 MINUTE(time) 返回time所对应的小时和分钟
MONTHNAME(date) 返回date的月份
DATE_FORMAT(date，fmt) 按照fmt格式化日期date
*格式符
   格式符 格式说明
   %S,%s 两位数字形式的秒（00,01,...,59）
   %i 两位数字形式的分（00,01,...,59）
   %H 两位数字形式的小时，24 小时（00,01,...,23）
   %h,%I 两位数字形式的小时，12 小时（01,02,...,12）
   %k 数字形式的小时，24 小时（0,1,...,23）
   %l 数字形式的小时，12 小时（1,2,...,12）
   %T 24 小时的时间形式（hh:mm:ss）
   %r 12 小时的时间形式（hh:mm:ssAM 或hh:mm:ssPM）
   %p AM 或PM
   %W 一周中每一天的名称（Sunday,Monday,...,Saturday）
   %a 一周中每一天名称的缩写（Sun,Mon,...,Sat）
   %d 两位数字表示月中的天数（00,01,...,31）
   %e 数字形式表示月中的天数（1,2，...,31）
   %D 英文后缀表示月中的天数（1st,2nd,3rd,...）
   %w 以数字形式表示周中的天数（0=Sunday,1=Monday,...,6=Saturday）
   %j 以3 位数字表示年中的天数（001,002,...,366）
   %U 周（0,1,52），其中Sunday 为周中的第一天
   %u 周（0,1,52），其中Monday 为周中的第一天
   %M 月名（January,February,...,December）
   %b 缩写的月名（January,February,...,December）
   %m 两位数字表示的月份（01,02,...,12）
   %c 数字表示的月份（1,2,...,12）
   %Y 4 位数字表示的年份
   %y 两位数字表示的年份
   %% 直接值“%”
DATE_ADD(date，INTERVAL expr type) 返回所给date相差interval时间段的日期，INTERVAL是间隔关键字，expr是表达式，type是间隔类型
*MySQL中的间隔类型
   表达式类型 描述 格式
   HOUR 小时 hh
   MINUTE 分 mm
   SECOND 秒 ss
   YEAR 年 YY
   MONTH 月 MM
   DAY 日 DD
   YEAR_MONTH 年和月 YY-MM
   DAY_HOUR 日和小时 DD hh
   DAY_MINUTE 日和分钟 DD hh:mm
   DAY_ SECOND 日和秒 DD hh:mm:ss
   HOUR_MINUTE 小时和分 hh:mm
   HOUR_SECOND 小时和秒 hh:ss
   MINUTE_SECOND 分钟和秒 mm:ss
DATEDIFF(date1，date2) 计算两个时间之间相差的天数

流程函数
IF(value，t，f) value为真返回t，否则返回f
IFNULL(value1，value2) 常用来替换NULL值，因为NULL不能用来运算
CASE WHEN [value] THEN [result]...ELSE [default] END

其他常用函数
DATABASE() 返回当前数据库名
VERSION() 返回当前数据库版本
USER() 返回当前登录用户名
INET_ATON(IP) 返回IP地址的网络字节序表示
INET_NTOA(num) 返回网络字节序代表的IP地址
PASSWORD(str) 返回str的加密版本，这个函数只用来设置系统用户的密码，但是不能用来对数据的加密，数据的加密一般使用MD5等加密函数
MD5(str) 返回字符串str的MD5值

表类型（存储引擎）的选择
*插件式存储引擎是MySQL数据库最重要的特性之一，用户可以定制和使用自己的引擎
>查看当前的默认存储引擎：show variables like 'table_type'
>查询当前数据库支持的存储引擎：show engines \g 或者 show variables like 'have%'
>创建表时设置存储引擎：create table [tablename] (...) engine=[enginename] default charset=gbk
>修改存储引擎：alter table [tablename] engine=[new_enginename]

MyISAM
*MySQL的默认引擎，不支持事务，也不支持外键，优点时访问速度快，以SELECT和INSERT为主的应用可以使用这个引擎
*磁盘上存储成三个文件：.frm(存储表定义)，.MYD(存储数据)，.MYI(存储索引)，数据文件和索引文件放在不同的目录，平均分布IO，可以获得更快的速度
*支持三种不同的存储格式：静态表，动态表，压缩表
*静态表：都是非变长字段，优点是存储迅速，容易缓存，故障易修复，缺点是占用空间会比较多
*动态表：包含变长字段，优点是占用的空间较少，缺点是频繁更新删除记录会产生碎片，需要定期 OPTIMIZE TABLE或myisamchk -r来改善性能，出现故障难修复
*压缩表：每个记录被单独压缩，占用非常小的磁盘空间

InnoDB
*提供具有提交、回滚和崩溃恢复能力的事务安全，相比MyISAM在写的处理上差，并且占用更多磁盘空间以保留数据和索引
*可手动插入自动增长列，无论插入什么值，显示的都是自动增长后的结果
*自动增长列必须是索引，如果是组合索引，自动增长列也必须是第一列
*MySQL支持外键的唯一存储引擎
*创建外键时要求父表必须有对应的索引，字表在创建外键的时候也会自动创建对应的索引
*在创建索引的时候，可以指定在删除、更新父表时，对子表的相应操作
   >RESTRICT和NO ACTION相同，是指限制在字表有关联记录的情况下父表不能更新
   >CASCADE表示父表在更新或者删除时，更新或者删除子表对应记录
   >SET NULL表示在父表更新或者删除时，子表的对应字段被SET NULL
*当某个表被其他表创建了外键参照，那么该表对应索引或者主键禁止被删除
*若想暂时关闭外键的检查，可以使用SET FOREIGN_KEY_CHECKS = 0，执行完毕后在SET为1即可
*外键信息可以通过show create table 或者 show table status显示
*存储方式：
   >共享表空间存储，表结构保存在.frm中，数据和索引保存在innodb_data_home_dir和innodb_data_file_path定义的表空间中，可以是多个文件
   >多表空间存储，表结构保存在.frm中，每个表的数据和索引单独保存在.ibd中，需要设置参数innodb_file_per_table，重新启动服务后生效。五数据文件大小限制，无需设置初始大小，无需设置文件的最大限制、扩展大小等参数。可以方便地进行单表备份和恢复操作，但是不能直接赋值.ibd和.frm文件，需要通过命令：
   alter table [tablename] discard tablespace
   alter table [tablename] import tablespace
   这样可以恢复到原来的数据库中，要复制到目标数据库需要通过mysqldump和mysqlimport来实现
*即使时多表空间存储，共享表空间也是必须的，InnoDB把内部数据词典和未作日志放在这个文件中

Memory
*使用存在内存中的内容来创建表
*每个MEMORY表值对应一个磁盘文件.frm
*访问非常快，默认使用HASH索引，但是一旦服务关闭，数据就会丢失掉
*创建索引时可以指定HASH索引还是BTREE索引
*主要用在内容变化不频繁的代码表，或者作为统计操作的中间结果表，便于搞笑地对中间结果进行分析并得到最终的统计结果

MERGE
*是MyISAM一组表的组合，并且这些表的结构必须完全相同
*磁盘上有.frm存储表定义和.mrg包含组合表信息的两个文件，可以通过.mrg修改MERGE表，但是需要用FLUSH TABLES刷新

如何选择存储引擎
MyISAM：以读操作和插入操作为主，对事务完整性和并发性要求不高。
InnoDB：对事务完整性要求较高，在并发条件下要求数据的一致性，增删改查操作比较频繁，像财务系统等对数据准确性要求比较高的系统
MEMORY：用于更新不太频繁的小表，用以快速得到访问结果
MERGE：突破对单个MyISAM表大小的限制，有效改善MERGE表的访问效率

数据类型的选择
char 和 varchar
*char是固定长度的，因此处理速度比较快，但是同时对存储空间会比较浪费
*varchar是可变长度的，随着版本的升级，varchar的性能也在不断提高
*不同的存储引擎也会影响数据类型的选择
>MyISAM：建议使用固定长度的数据类型来替换可变长度的数据类型
>MEMORY：char和varchar都被作为char类型处理，因此选择上没有影响
>InnoDB：建议使用varchar类型，行存储中没有区分固定长度和可变长度，char类型不一定比varchar要好，反而占据更多存储空间

TEXT和BLOB
*保存大量字符串时使用这两个，区别时BLOB支持二进制数据的存储，如照片，TEXT只能保存字符数据，如文章
*TEXT包含TEXT, MEDIUMTEXT, LONGTEXT; BLOB包含BLOB, MEDIUMBLOB, LONGBLOB
*两者在执行大量删除时会出现性能的问题，在数据中留下大量的空洞，删除数据，但是存储空间没有变化，可以使用碎片整理功能OPTIMIZE TABLE [tablename] 来优化
*可以使用合成索引提高大段文本的查询功能
*合成索引只能用于精确索引，可以使用MD5(), SHA1()或者CRC32()来计算散列值
*尽量避免检索大型的BLOB或TEXT值，除非WHERE只会找所需要的数据行
*复制TEXT或BLOB到第二张表，可以有效的减少主表中的碎片

浮点数和定点数
*浮点数插入的数据要是精度超过实际精度，则会四舍五入到实际精度值，浮点数包含float, double (或real)
*定点数实际上是以字符串的形式存放的，定点数插入的数据大于实际精度，MySQL会警告，但是数据还是会四舍五入插入，定点数包含double（或numberic）
*单精度浮点数有时候在存储的时候会存在误差，在对精确度要求较高的系统中，我们需要使用定点数
*由于浮点数误差的问题，在浮点数比较的时候也最好使用范围比较，而不是==

日期类型的选择
*选择能够满足需要的最小存储的日期类型
*记录年月日时分秒，并且年代比较久远，使用DATETIME，因为DATETIME比TIMESTAMP表示的范围要大得多
*若记录的时间需要给不同的时区的人使用，要使用TIMESTAMP

索引的设计和使用
*创建索引：create index [indexname] on [tablename](colname(length))，表示为表创建了长度为length的前缀索引
*以city为条件进行查询：explain select * from city where city = 'Fuzhou' \G
*删除索引：drop index [indexname] on [tablename]
*设计原则：
   >搜索的索引列，不一定要是选择的列
   >使用唯一索引
   >使用短索引，对字符串进行索引，应该指定一个前缀长度
   >利用最左索引，即创建索引的时候其实会对一个表的n列都创建了索引，在进行行搜索的时候，利用最左边的列集，即最左前缀
   >不要过度索引，每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能，只保留需要的索引即可
   >对InnoDB存储引擎的表，尽量自己指定主键，提高查询的效率
*HASH索引需要注意
   >只用于使用=或<=>操作符的等式比较
   >优化器不能使用HASH索引来加速ORDER BY操作
   >只能使用整个关键字来搜索一行
*BTREE所以，当使用>, <, >=, <=, BETWEEN, !=或者<>，或者LIKE 'PATTERN'操作符时，都可以使用相关列上的索引

   
